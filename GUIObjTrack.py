#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Dec 13, 2018 09:03:04 PM CST  platform: Windows NT

import sys

#import pre_processing_data as Sides

#import EstructuraObjeto

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from GUI2 import AEP2018_support

from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import numpy as np
from matplotlib.collections import PatchCollection
from matplotlib.patches import Rectangle

from ot_functions import *

#%%-----------------------------------------------------------Function-------------------------------------------------------------------------------------#
continuePlotting = False   
a=0
global ax, fi
fi = Figure()
createObjectsLists()
def data_points(sample):
    [rightClusters, leftClusters] = get_ClustersList(sample)
    posX=[]
    posY=[]
    clusType=[]
    for clus in range(len(rightClusters)):
        posY.append(rightClusters[clus].f_DistX)
        posX.append(-(rightClusters[clus].f_DistY))
        clusType.append(rightClusters[clus].s_ClusterKinematicID)
    for clus in range(len(leftClusters)):
        posY.append(leftClusters[clus].f_DistX)
        posX.append(-(leftClusters[clus].f_DistY))
        clusType.append(leftClusters[clus].s_ClusterKinematicID)
    posX=np.asarray(posX)
    posY=np.asarray(posY)           
    clusType=np.asarray(clusType)
    clusTypeC = np.where(clusType=='Static','c',np.where(clusType=="Ambig", 'g',np.where(clusType=="Static-Ambig", 'r','m')) )
    #clusTypeFig = np.where(clusType=='Static','+',np.where(clusType=="Ambig", '*',np.where(clusType=="Static-Ambig", '.','p')) )
    #print(np.shape(posX),np.shape(posY),np.shape(clusTypeFig))
    return [posX, posY,clusTypeC]
def data_object(sample):
    if sample>2:
        [rightObjects, leftObjects] = get_objectsList(sample)
        objectsPatch=[]
        for obj in range(len(rightObjects.l_40TrackedObjs)):
            rect = Rectangle((-rightObjects.l_40TrackedObjs[obj].f_DistY, rightObjects.l_40TrackedObjs[obj].f_DistX), 1.9, 4)
            objectsPatch.append(rect)
    
        for obj in range(len(leftObjects.l_40TrackedObjs)):
            rect = Rectangle((-leftObjects.l_40TrackedObjs[obj].f_DistY, leftObjects.l_40TrackedObjs[obj].f_DistX), 1.9, 4)
            objectsPatch.append(rect)
        ObjCollection = PatchCollection(objectsPatch, facecolor='r', alpha=0.3,
                         edgecolor='None')
        return ObjCollection


def change_state():
    global continuePlotting
    if continuePlotting == True:
        continuePlotting = False
    else:
        continuePlotting = True
def plotter():
    global a, ax
    
    ax.cla()
    ax.grid()
    ax.set_xlabel("Y axis")
    ax.set_ylabel("X axis")          
    [x,y, co] = data_points(a)
    
    #print(np.shape(x),np.shape(y),np.shape(co))
    if np.shape(x)>(0,):
         ax.scatter(x, y,c=co, marker='X')
         if a>2:
            objPat=data_object(a)
            ax.add_collection(objPat)
         ax.set_xlim(-30, 30)
         ax.set_ylim(-30, 30)
         top.frame.canvas.draw()
   
    a += 1
    print (a)
    

def continuePlot():
    global top, continuePlotting
    if continuePlotting:
        plotter()
    root.after(1,continuePlot)

def stopFunction():
    global continuePlotting, root
    continuePlotting=False
    root.destroy()

def playFunction():
    global continuePlotting
    continuePlotting=True

def vp_StartButton_gui():
    '''StartButtoning point when module is the main routine.'''
    global val, w, root, top, play, sample, ax, fi
    play=False
    sample=0
    root = tk.Tk()
    top = Toplevel1 (root)
    AEP2018_support.init(root, top)
    createObjectsLists()
    
    ax = fi.add_subplot(111)
    ax.set_xlabel("Y axis")
    ax.set_ylabel("X axis")
    ax.set_xlim(-50, 50)
    ax.set_ylim(-50, 50)
    ax.grid()

    continuePlot()
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''StartButtoning point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    AEP2018_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 

        top.geometry("1366x768")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.attributes("-fullscreen", True)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Status = tk.Label(top)
        self.Status.place(relx=0.0, rely=0.0, height=768, width=1366)
        self._img1 = tk.PhotoImage(file='./fondo4.png')
        self.Status.configure(image=self._img1)
        #self.Status.configure(justify=LEFT)
        self.Status.configure(text='''Label''')
        self.Status.configure(width=1366)
        self.Status.configure(height=768)

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.1, rely=0.15, relheight=0.8
                , relwidth=0.65)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        self.Frame1.configure(width=800)

        self.Frame1.grid_rowconfigure(0, weight=1)
        self.Frame1.grid_columnconfigure(0, weight=1)

        self.frame = GraphPageA(fi,self.Frame1)
        self.frame.grid(row=0, column=0, sticky="nsew")
        self.frame.tkraise()
        self.frame.canvas.draw_idle()

        self.StartButton = tk.Button(top)
        self.StartButton.place(relx=0.8, rely=0.3, height=75, width=150)
        self.StartButton.configure(activebackground="#000000")
        self.StartButton.configure(activeforeground="#000000")
        self.StartButton.configure(background="#d9d9d9")
        self.StartButton.configure(disabledforeground="#a3a3a3")
        self.StartButton.configure(foreground="#000000")
        self.StartButton.configure(highlightbackground="#d9d9d9")
        self.StartButton.configure(highlightcolor="black")
        self._img3 = tk.PhotoImage(file="./playpause.png")
        self.StartButton.configure(image=self._img3)
        self.StartButton.configure(pady="0")
        self.StartButton.configure(text='''PLAY/PAUSE''')
        self.StartButton.configure(command=change_state)

        self.StopButton = tk.Button(top)
        self.StopButton.place(relx=0.83, rely=0.6, height=75, width=75)
        self.StopButton.configure(activebackground="#000000")
        self.StopButton.configure(activeforeground="#000000")
        self.StopButton.configure(background="#d9d9d9")
        self.StopButton.configure(disabledforeground="#a3a3a3")
        self.StopButton.configure(foreground="#000000")
        self.StopButton.configure(highlightbackground="#d9d9d9")
        self.StopButton.configure(highlightcolor="black")
        self._img4 = tk.PhotoImage(file="./close.png")
        self.StopButton.configure(image=self._img4)
        self.StopButton.configure(pady="0")
        self.StopButton.configure(text='''STOP''')
        self.StopButton.configure(command=stopFunction)

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.83, rely=0.45, height=75, width=75)
        self.Button1.configure(activebackground="#000000")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self._img2 = tk.PhotoImage(file="./next.png")
        self.Button1.configure(image=self._img2)
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Button''')
        self.Button1.configure(command=plotter)
"""
        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.025, rely=0.7, height=66, width=126)
        self.Button2.configure(activebackground="#000000")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self._img3 = tk.PhotoImage(file="./GUI2/flecha_izquierda2.png")
        self.Button2.configure(image=self._img3)
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Button''')
        self.Button2.configure(command=stopFunction)"""


class GraphPageA(tk.Frame):
    def __init__(self,fig,framePage):
        tk.Frame.__init__(self,framePage)
        canvasA = FigureCanvasTkAgg(fig,self)
        canvasA.draw()
        canvasA.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
        self.canvas = canvasA

if __name__ == '__main__':
    vp_StartButton_gui()
